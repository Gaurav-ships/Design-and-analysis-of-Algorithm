#include<stdio.h>
#include<math.h>
void mergeSort(int A[],int l, int r);
void merge(int A[],int l,int m,int r);
int inversionCount(int A[],int n);
int main()
{
 int t;
 printf("enter the test cases:");
 scanf("%d",&t);
 while(t--)
 {
  int n,i;
  printf("\nInput array limit: ");
  scanf("%d",&n);
  int A[n];
  printf("\nInput array elements: ");
  for(i=0;i<n;i++)
  scanf("%d",&A[i]);
  int c=inversionCount(A,n);
  int comp=n*log2(n)-(n-1);
  printf("\nInversion count:%d",c);
   printf("\nNo of comparison:%d",comp);
  mergeSort(A,0,n-1);
  printf("\nSorted array:");
   for(i=0;i<n;i++)
    printf("%d ",A[i]);
 }

}
int inversionCount(int A[],int n)
{
    int count=0;
    for(int i=0;i<n-1;i++)
    {
        for(int j=i+1;j<n;j++)
        {
            if(A[i]>A[j])
                count++;
        }
    }
    return count;
}
void mergeSort(int A[],int l, int r)
{
if(l<r)
{
int m=l+(r-l)/2;
mergeSort(A,l,m);
mergeSort(A,m+1,r);
merge(A,l,m,r);
}
}
void merge(int A[],int l,int m,int r)
{
int n1=m-l+1;
int n2=r-m;
int L[n1],R[n2],i;
for(i=0;i<n1;i++)
    L[i]=A[l+i];
for(i=0;i<n2;i++)
    R[i]=A[m+1+i];
    int j,k;
    i=0;j=0;k=l;
    while(i<n1 && j<n2)
    {
        if(L[i]<=R[j])
        {
            A[k]=L[i];
            i++;
            k++;
        }
        else
        {
            A[k]=R[j];
            j++;
            k++;
        }
    }
    while(i<n1)
    {
        A[k]=L[i];
        i++;
        k++;
    }
    while(j<n2)
    {
        A[k]=R[j];
        j++;
        k++;
    }
}









